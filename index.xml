<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>https://stone-tree.github.io/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 27 Mar 2020 18:20:53 +0800</lastBuildDate>
    
	<atom:link href="https://stone-tree.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Firstblog</title>
      <link>https://stone-tree.github.io/post/firstblog/</link>
      <pubDate>Fri, 27 Mar 2020 18:20:53 +0800</pubDate>
      
      <guid>https://stone-tree.github.io/post/firstblog/</guid>
      <description>java7的HashMap造成死循环的通俗化讲解 在JDK1.7及以前的版本，如果在并发环境中使用HashMap保存数据，有可能会产生死循环的问题。产生这个问题是因为JDK1.7及以前的版本中，HashMap扩容采用的是头插入，1.8做的改进是采用尾插法，所以不会造成死循环的问题。 首先，来看1.7扩容的代码：
//进行扩容时方法  void resize(int newCapacity) { Entry[] oldTable = table; int oldCapacity = oldTable.length; if (oldCapacity == MAXIMUM_CAPACITY) { threshold = Integer.MAX_VALUE; return; } Entry[] newTable = new Entry[newCapacity]; //多线程情况下，上面创建好新的数组，死循环就是在下面方法中产生的  transfer(newTable, initHashSeedAsNeeded(newCapacity)); table = newTable; threshold = (int)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1); } void transfer(Entry[] newTable, boolean rehash) { int newCapacity = newTable.length; for (Entry&amp;lt;K,V&amp;gt; e : table) { while(null != e) { Entry&amp;lt;K,V&amp;gt; next = e.</description>
    </item>
    
  </channel>
</rss>